{"version":3,"sources":["../../src/utilities/readDirectory.js"],"names":["hasIndex","directoryPath","indexPath","resolve","statSync","error","hasNoExtension","fileName","matches","match","hasMultipleExtensions","length","isSafeName","test","stripExtension","pos","lastIndexOf","substr","removeDuplicates","files","preferredExtension","filter","withoutExtension","mainAlternative","includes","options","children","silent","readdirSync","extensions","absolutePath","isDirectory","startsWith","some","ext","endsWith","sort"],"mappings":"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","file":"readDirectory.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport _ from 'lodash';\nimport validateTargetDirectory from './validateTargetDirectory';\n\nconst hasIndex = (directoryPath) => {\n  const indexPath = path.resolve(directoryPath, 'index.js');\n\n  try {\n    fs.statSync(indexPath);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst hasNoExtension = (fileName) => {\n  const matches = fileName.match(/\\./g);\n\n  return !matches;\n};\n\nconst hasMultipleExtensions = (fileName) => {\n  const matches = fileName.match(/\\./g);\n\n  return matches && matches.length > 1;\n};\n\nconst isSafeName = (fileName) => {\n  return /^[a-z][a-z0-9._]+$/i.test(fileName);\n};\n\nconst stripExtension = (fileName) => {\n  const pos = fileName.lastIndexOf('.');\n\n  if (pos === -1) {\n    return fileName;\n  }\n\n  return fileName.substr(0, pos);\n};\n\nconst removeDuplicates = (files, preferredExtension) => {\n  return _.filter(files, (fileName) => {\n    const withoutExtension = stripExtension(fileName);\n    const mainAlternative = withoutExtension + '.' + preferredExtension;\n\n    if (mainAlternative === fileName) {\n      return true;\n    }\n\n    return !_.includes(files, mainAlternative);\n  });\n};\n\nexport default (directoryPath, options = {}) => {\n  let children;\n\n  if (!validateTargetDirectory(directoryPath, {silent: options.silent})) {\n    return false;\n  }\n\n  children = fs.readdirSync(directoryPath);\n  const {extensions = ['js']} = options;\n\n  children = _.filter(children, (fileName) => {\n    const absolutePath = path.resolve(directoryPath, fileName);\n    const isDirectory = fs.statSync(absolutePath).isDirectory();\n\n    if (!isSafeName(fileName)) {\n      return false;\n    }\n\n    if (hasNoExtension(fileName) && !isDirectory) {\n      return false;\n    }\n\n    if (hasMultipleExtensions(fileName)) {\n      return false;\n    }\n\n    if (_.startsWith(fileName, 'index.js')) {\n      return false;\n    }\n\n    if (!isDirectory && !extensions.some((ext) => {\n      return _.endsWith(fileName, '.' + ext);\n    })) {\n      return false;\n    }\n\n    if (isDirectory && !hasIndex(absolutePath)) {\n      return false;\n    }\n\n    return true;\n  });\n\n  children = removeDuplicates(children, extensions[0]);\n\n  return children.sort();\n};\n"]}